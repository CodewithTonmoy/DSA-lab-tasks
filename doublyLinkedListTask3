#include <iostream>


struct Node {
    int data;
    Node* next;
    
  
    Node(int value) : data(value), next(nullptr) {}
};


class LinkedList {
private:
    Node* head; 

public:
   
    LinkedList() : head(nullptr) {}

   
    void insertAtEnd(int value) {
        Node* newNode = new Node(value); 

        if (head == nullptr) {
           
            head = newNode;
        } else {
            
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;
            }

         
            current->next = newNode;
        }
    }

   
    void deleteNode(int value) {
        Node* current = head;
        Node* prev = nullptr;

       
        while (current != nullptr && current->data != value) {
            prev = current;
            current = current->next;
        }

       
        if (current != nullptr) {
           
            if (prev != nullptr) {
                prev->next = current->next;
            } else {
              
                head = current->next;
            }

          
            delete current;
        }
    }

  
    void display() {
        Node* current = head;
        while (current != nullptr) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
};


int main() {
    
    LinkedList myList;

    
    myList.insertAtEnd(1);
    myList.insertAtEnd(2);
    myList.insertAtEnd(3);

   
    std::cout << "Initial list: ";
    myList.display();

  
    myList.deleteNode(2);

   
    std::cout << "List after deleting 2: ";
    myList.display();

    return 0;
}
